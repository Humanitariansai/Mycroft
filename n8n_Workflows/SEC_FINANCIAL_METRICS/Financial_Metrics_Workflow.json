{
  "name": "SEC Analysis - GitHub Auto-Deploy",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "analyze-company",
        "responseMode": "responseNode"
      },
      "id": "548d53e3-09f8-4924-adb2-9bd3561d107e",
      "name": "Company Analysis Input",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "ticker",
              "stringValue": "={{ $json.ticker?.toUpperCase() }}"
            },
            {
              "name": "user_agent", 
              "stringValue": "={{ $json.user_agent || 'SEC Analyzer workflow@example.com' }}"
            },
            {
              "name": "github_repo_url",
              "stringValue": "https://raw.githubusercontent.com/YOUR_USERNAME/YOUR_REPO/main"
            },
            {
              "name": "scripts_path",
              "stringValue": "path/to/your/sec-scripts"
            },
            {
              "name": "work_dir",
              "stringValue": "=/tmp/sec_analysis_{{ $json.ticker?.toUpperCase() || 'UNKNOWN' }}_{{ Date.now() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "99c8bc94-cf97-403d-8a31-78fb6190905f",
      "name": "Set Variables",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [460, 300]
    },
    {
      "parameters": {
        "command": "=mkdir -p {{ $json.work_dir }}/scripts && mkdir -p {{ $json.work_dir }}/data"
      },
      "id": "create-directories",
      "name": "Create Directories",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "url": "={{ $json.github_repo_url }}/{{ $json.scripts_path }}/requirements.txt",
        "responseFormat": "text"
      },
      "id": "download-requirements",
      "name": "Download Requirements",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [500, 480]
    },
    {
      "parameters": {
        "url": "={{ $json.github_repo_url }}/{{ $json.scripts_path }}/edgar_fetcher.py",
        "responseFormat": "text"
      },
      "id": "download-edgar",
      "name": "Download EDGAR Script",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [500, 560]
    },
    {
      "parameters": {
        "url": "={{ $json.github_repo_url }}/{{ $json.scripts_path }}/financial_analyzer.py",
        "responseFormat": "text"
      },
      "id": "download-financial",
      "name": "Download Financial Script",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [500, 640]
    },
    {
      "parameters": {
        "url": "={{ $json.github_repo_url }}/{{ $json.scripts_path }}/narrative_parser.py",
        "responseFormat": "text"
      },
      "id": "download-narrative",
      "name": "Download Narrative Script",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [500, 720]
    },
    {
      "parameters": {
        "jsCode": "// Get all download results\nconst items = $input.all();\nconst config = items[0].json; // From Set Variables\n\n// Find downloaded files by checking which items have 'body' property\nconst downloads = items.slice(1); // Skip the config item\n\nconst files = {\n  'requirements.txt': downloads.find(item => item.json.url?.includes('requirements.txt'))?.json.body,\n  'edgar_fetcher.py': downloads.find(item => item.json.url?.includes('edgar_fetcher'))?.json.body,\n  'financial_analyzer.py': downloads.find(item => item.json.url?.includes('financial_analyzer'))?.json.body,\n  'narrative_parser.py': downloads.find(item => item.json.url?.includes('narrative_parser'))?.json.body\n};\n\n// Check for missing files\nconst missing = Object.entries(files)\n  .filter(([name, content]) => !content)\n  .map(([name]) => name);\n\nif (missing.length > 0) {\n  throw new Error(`Failed to download: ${missing.join(', ')}`);\n}\n\n// Write files using Node.js fs\nconst fs = require('fs');\nconst { execSync } = require('child_process');\n\nObject.entries(files).forEach(([filename, content]) => {\n  const filepath = `${config.work_dir}/scripts/${filename}`;\n  fs.writeFileSync(filepath, content, 'utf8');\n});\n\n// Make scripts executable\nexecSync(`chmod +x ${config.work_dir}/scripts/*.py`);\n\nreturn [{\n  json: {\n    ...config,\n    files_ready: true,\n    downloaded_files: Object.keys(files)\n  }\n}];"
      },
      "id": "save-scripts",
      "name": "Save Scripts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [720, 600]
    },
    {
      "parameters": {
        "command": "=cd {{ $json.work_dir }}/scripts && pip3 install -r requirements.txt --user --quiet"
      },
      "id": "install-deps",
      "name": "Install Dependencies",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [940, 600]
    },
    {
      "parameters": {
        "command": "=cd {{ $json.work_dir }}/scripts && python3 edgar_fetcher.py --ticker {{ $json.ticker }} --output-dir {{ $json.work_dir }}/data --user-agent \"{{ $json.user_agent }}\" --forms 10-K,10-Q,8-K --max-per-type 2"
      },
      "id": "run-edgar",
      "name": "1. Download SEC Filings", 
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [1160, 480]
    },
    {
      "parameters": {
        "jsCode": "// Parse EDGAR output\nconst stdout = $input.first().json.stdout;\nconst stderr = $input.first().json.stderr;\nconst exitCode = $input.first().json.exitCode;\nconst config = $node['Set Variables'].json;\n\nif (exitCode !== 0) {\n  return [{\n    json: {\n      success: false,\n      error: `EDGAR script failed: ${stderr}`,\n      ticker: config.ticker\n    }\n  }];\n}\n\nlet result = {};\ntry {\n  const jsonMatch = stdout.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    result = JSON.parse(jsonMatch[0]);\n  } else {\n    throw new Error('No JSON found in output');\n  }\n} catch (e) {\n  return [{\n    json: {\n      success: false,\n      error: `Failed to parse EDGAR output: ${e.message}`,\n      raw_output: stdout\n    }\n  }];\n}\n\nif (!result.success) {\n  return [{\n    json: {\n      success: false,\n      error: result.error || 'EDGAR processing failed',\n      ticker: config.ticker\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    ...result,\n    work_dir: config.work_dir,\n    ticker: config.ticker,\n    user_agent: config.user_agent\n  }\n}];"
      },
      "id": "parse-edgar",
      "name": "Parse EDGAR Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1380, 480]
    },
    {
      "parameters": {
        "command": "=cd {{ $json.work_dir }}/scripts && python3 financial_analyzer.py --ticker {{ $json.ticker }} --user-agent \"{{ $json.user_agent }}\" --output-dir {{ $json.work_dir }}/data"
      },
      "id": "run-financial",
      "name": "2. Financial Analysis",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [1160, 680]
    },
    {
      "parameters": {
        "jsCode": "// Parse Financial output\nconst stdout = $input.first().json.stdout;\nconst stderr = $input.first().json.stderr;\nconst exitCode = $input.first().json.exitCode;\nconst ticker = $node['Set Variables'].json.ticker;\n\nif (exitCode !== 0) {\n  return [{\n    json: {\n      success: false,\n      error: `Financial script failed: ${stderr}`,\n      ticker: ticker\n    }\n  }];\n}\n\nlet result = {};\ntry {\n  const jsonMatch = stdout.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    result = JSON.parse(jsonMatch[0]);\n  } else {\n    result = { raw_output: stdout };\n  }\n} catch (e) {\n  return [{\n    json: {\n      success: false,\n      error: `Failed to parse financial output: ${e.message}`,\n      raw_output: stdout\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    success: true,\n    ticker: ticker,\n    financial_data: result\n  }\n}];"
      },
      "id": "parse-financial",
      "name": "Parse Financial Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1380, 680]
    },
    {
      "parameters": {
        "command": "=cd {{ $json.work_dir }}/scripts && python3 narrative_parser.py --input-dir {{ $json.output_directory }} --output-dir {{ $json.work_dir }}/data/narratives --ticker {{ $json.ticker }}"
      },
      "id": "run-narrative",
      "name": "3. Narrative Analysis",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [1160, 880]
    },
    {
      "parameters": {
        "jsCode": "// Parse Narrative output\nconst stdout = $input.first().json.stdout;\nconst stderr = $input.first().json.stderr;\nconst exitCode = $input.first().json.exitCode;\nconst ticker = $node['Set Variables'].json.ticker;\n\nif (exitCode !== 0) {\n  return [{\n    json: {\n      success: false,\n      error: `Narrative script failed: ${stderr}`,\n      ticker: ticker\n    }\n  }];\n}\n\nlet result = {};\ntry {\n  const jsonMatch = stdout.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    result = JSON.parse(jsonMatch[0]);\n  } else {\n    result = { raw_output: stdout };\n  }\n} catch (e) {\n  return [{\n    json: {\n      success: false,\n      error: `Failed to parse narrative output: ${e.message}`,\n      raw_output: stdout\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    success: true,\n    ticker: ticker,\n    narrative_data: result\n  }\n}];"
      },
      "id": "parse-narrative",
      "name": "Parse Narrative Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1380, 880]
    },
    {
      "parameters": {
        "jsCode": "// Combine all results\nconst edgarData = $input.item(0).json;\nconst financialData = $input.item(1).json;\nconst narrativeData = $input.item(2).json;\n\n// Check if any step failed\nif (!edgarData.success || !financialData.success || !narrativeData.success) {\n  const errors = [];\n  if (!edgarData.success) errors.push(`EDGAR: ${edgarData.error}`);\n  if (!financialData.success) errors.push(`Financial: ${financialData.error}`);\n  if (!narrativeData.success) errors.push(`Narrative: ${narrativeData.error}`);\n  \n  return [{\n    json: {\n      success: false,\n      error: errors.join('; '),\n      ticker: edgarData.ticker || financialData.ticker || narrativeData.ticker\n    }\n  }];\n}\n\nconst ticker = edgarData.ticker;\nconst company_name = edgarData.company_name || 'Unknown Company';\n\n// Extract financial highlights\nconst financial = financialData.financial_data.data || financialData.financial_data;\nconst narrative = narrativeData.narrative_data;\n\nconst report = {\n  success: true,\n  ticker: ticker,\n  company_name: company_name,\n  analysis_timestamp: new Date().toISOString(),\n  \n  edgar_summary: {\n    files_downloaded: edgarData.summary?.total_files || 0,\n    total_content_size: edgarData.summary?.total_size_chars || 0,\n    download_directory: edgarData.output_directory\n  },\n  \n  financial_highlights: {\n    revenue: financial.latest_annual_data?.revenue?.value || null,\n    net_income: financial.latest_annual_data?.net_income?.value || null,\n    fiscal_year: financial.latest_annual_data?.revenue?.fiscal_year || null,\n    key_ratios: financial.financial_ratios || {}\n  },\n  \n  narrative_highlights: {\n    files_processed: narrative.summary?.files_processed || 0,\n    total_blocks: narrative.summary?.total_narrative_blocks || 0,\n    ai_readiness_score: narrative.summary?.ai_readiness_score || 0,\n    top_themes: narrative.summary?.key_themes || []\n  }\n};\n\nreturn [{\n  json: report\n}];"
      },
      "id": "combine-results",
      "name": "Combine Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1600, 680]
    },
    {
      "parameters": {
        "jsCode": "const data = $input.first().json;\n\nif (!data.success) {\n  return [{\n    json: {\n      html: `<html><body><h1>Analysis Failed</h1><p>Error: ${data.error}</p><p>Ticker: ${data.ticker}</p></body></html>`,\n      error: data.error\n    }\n  }];\n}\n\n// Helper functions\nfunction formatCurrency(num) {\n  if (!num) return 'N/A';\n  return `$${(num / 1000000).toFixed(1)}M`;\n}\n\nfunction formatPercent(num) {\n  if (!num) return 'N/A';\n  return `${num.toFixed(1)}%`;\n}\n\nconst html = `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>SEC Analysis: ${data.ticker}</title>\n    <meta charset=\"utf-8\">\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; background: #f0f2f5; }\n        .container { max-width: 1000px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n        .header { background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 30px; border-radius: 10px; text-align: center; margin-bottom: 30px; }\n        .section { margin: 20px 0; padding: 20px; border: 1px solid #e1e5e9; border-radius: 8px; }\n        .metric { display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #f0f0f0; }\n        .metric:last-child { border-bottom: none; }\n        .ai-score { text-align: center; font-size: 2.5em; color: #10b981; font-weight: bold; margin: 20px 0; }\n        .themes { display: flex; flex-wrap: wrap; gap: 10px; margin-top: 15px; }\n        .theme { background: #3b82f6; color: white; padding: 6px 12px; border-radius: 15px; font-size: 0.9em; }\n        h2 { color: #374151; margin-bottom: 15px; }\n        .success { color: #10b981; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>${data.ticker}</h1>\n            <h2>${data.company_name}</h2>\n            <p>📊 Analysis completed: ${new Date().toLocaleDateString()}</p>\n            <p class=\"success\">✅ Auto-deployed from GitHub</p>\n        </div>\n        \n        <div class=\"section\">\n            <h2>🤖 AI Readiness Assessment</h2>\n            <div class=\"ai-score\">${data.narrative_highlights.ai_readiness_score}/100</div>\n            <div class=\"metric\">\n                <span>Files Processed:</span>\n                <span>${data.narrative_highlights.files_processed}</span>\n            </div>\n            <div class=\"metric\">\n                <span>Narrative Blocks:</span>\n                <span>${data.narrative_highlights.total_blocks}</span>\n            </div>\n        </div>\n        \n        <div class=\"section\">\n            <h2>💰 Financial Highlights (FY ${data.financial_highlights.fiscal_year || 'Latest'})</h2>\n            <div class=\"metric\">\n                <span>Revenue:</span>\n                <span>${formatCurrency(data.financial_highlights.revenue)}</span>\n            </div>\n            <div class=\"metric\">\n                <span>Net Income:</span>\n                <span>${formatCurrency(data.financial_highlights.net_income)}</span>\n            </div>\n            <div class=\"metric\">\n                <span>Gross Margin:</span>\n                <span>${formatPercent(data.financial_highlights.key_ratios.gross_margin_pct)}</span>\n            </div>\n            <div class=\"metric\">\n                <span>Net Margin:</span>\n                <span>${formatPercent(data.financial_highlights.key_ratios.net_margin_pct)}</span>\n            </div>\n            <div class=\"metric\">\n                <span>Return on Equity:</span>\n                <span>${formatPercent(data.financial_highlights.key_ratios.return_on_equity_pct)}</span>\n            </div>\n        </div>\n        \n        <div class=\"section\">\n            <h2>📄 Data Processing</h2>\n            <div class=\"metric\">\n                <span>SEC Filings Downloaded:</span>\n                <span>${data.edgar_summary.files_downloaded}</span>\n            </div>\n            <div class=\"metric\">\n                <span>Content Processed:</span>\n                <span>${(data.edgar_summary.total_content_size / 1000000).toFixed(1)} MB</span>\n            </div>\n        </div>\n        \n        <div class=\"section\">\n            <h2>🎯 Key Themes</h2>\n            <div class=\"themes\">\n                ${(data.narrative_highlights.top_themes || []).map(theme => \n                    `<span class=\"theme\">${theme.replace('_', ' ').toUpperCase()}</span>`\n                ).join('')}\n            </div>\n        </div>\n    </div>\n</body>\n</html>\n`;\n\nreturn [{\n  json: {\n    html: html,\n    data: data,\n    success: true\n  }\n}];"
      },
      "id": "create-html",
      "name": "Create HTML Report",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1820, 680]
    },
    {
      "parameters": {
        "command": "=rm -rf {{ $node['Set Variables'].json.work_dir }}"
      },
      "id": "cleanup",
      "name": "Cleanup Files",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [1820, 480]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "success-condition",
              "leftValue": "={{ $json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "check-success",
      "name": "Check Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2040, 680]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.html }}",
        "options": {
          "responseHeaders": {
            "Content-Type": "text/html"
          }
        }
      },
      "id": "success-response",
      "name": "Return HTML Report",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2240, 580]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { error: $json.error, ticker: $json.ticker, timestamp: new Date().toISOString() } }}",
        "options": {}
      },
      "id": "error-response",
      "name": "Return Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2240, 780]
    }
  ],
  "connections": {
    "Company Analysis Input": {
      "main": [
        [
          {
            "node": "Set Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Variables": {
      "main": [
        [
          {
            "node": "Create Directories",
            "type": "main",
            "index": 0
          },
          {
            "node": "Download Requirements",
            "type": "main",
            "index": 0
          },
          {
            "node": "Download EDGAR Script",
            "type": "main",
            "index": 0
          },
          {
            "node": "Download Financial Script",
            "type": "main",
            "index": 0
          },
          {
            "node": "Download Narrative Script",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Requirements": {
      "main": [
        [
          {
            "node": "Save Scripts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download EDGAR Script": {
      "main": [
        [
          {
            "node": "Save Scripts",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Download Financial Script": {
      "main": [
        [
          {
            "node": "Save Scripts",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Download Narrative Script": {
      "main": [
        [
          {
            "node": "Save Scripts",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Save Scripts": {
      "main": [
        [
          {
            "node": "Install Dependencies",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Install Dependencies": {
      "main": [
        [
          {
            "node": "1. Download SEC Filings",
            "type": "main",
            "index": 0
          },
          {
            "node": "2. Financial Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1. Download SEC Filings": {
      "main": [
        [
          {
            "node": "Parse EDGAR Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse EDGAR Results": {
      "main": [
        [
          {
            "node": "3. Narrative Analysis",
            "type": "main",
            "index": 0
          },
          {
            "node": "Combine Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2. Financial Analysis": {
      "main": [
        [
          {
            "node": "Parse Financial Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Financial Results": {
      "main": [
        [
          {
            "node": "Combine Results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "3. Narrative Analysis": {
      "main": [
        [
          {
            "node": "Parse Narrative Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Narrative Results": {
      "main": [
        [
          {
            "node": "Combine Results",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Combine Results": {
      "main": [
        [
          {
            "node": "Create HTML Report",
            "type": "main",
            "index": 0
          },
          {
            "node": "Cleanup Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create HTML Report": {
      "main": [
        [
          {
            "node": "Check Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Success": {
      "main": [
        [
          {
            "node": "Return HTML Report",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Return Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "auto-generated",
  "meta": {
    "instanceId": "auto-generated"
  },
  "id": "auto-generated",
  "tags": []
}