{
  "name": "Mycroft Forecasting Agent",
  "nodes": [
    {
      "parameters": {
        "url": "=https://www.alphavantage.co/query\n",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "function",
              "value": "TIME_SERIES_DAILY"
            },
            {
              "name": "symbol",
              "value": "={{$json.symbol || $node[\"Configuration\"].json.company_symbol}}\n"
            },
            {
              "name": "apikey",
              "value": "={{ $json.alpha_vintage }}"
            },
            {
              "name": "outputsize",
              "value": "compact"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -80,
        -704
      ],
      "id": "26393bd9-45a3-459c-8ff5-908607aeda08",
      "name": "Alpha Vantage Market Data"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3791e4f9-e184-4021-bfe9-be69e3be62a1",
              "name": "finbert_token",
              "value": "your_api_key",
              "type": "string"
            },
            {
              "id": "ab0a8ef5-6cbe-4b6f-ba80-238a3bbea7d8",
              "name": "alpha_vintage",
              "value": "your_api_key",
              "type": "string"
            },
            {
              "id": "91760565-dcd6-4afd-9c6f-f2d3457d1a7f",
              "name": "company_symbol",
              "value": "=AAPL",
              "type": "string"
            },
            {
              "id": "8e283481-55b1-4ca6-a97a-091536de7e91",
              "name": "forecast_horizon_days",
              "value": "25",
              "type": "string"
            },
            {
              "id": "caedac8a-a299-4c85-8bf2-b1e52fdbb91b",
              "name": "postgres_connection",
              "value": "postgresql://user:pass@localhost:5432/forecasting",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -624,
        -496
      ],
      "id": "3677bfb9-e5da-473e-8d59-e967bab69ea0",
      "name": "Configuration"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api-inference.huggingface.co/models/ProsusAI/finbert",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.finbert_token }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"inputs\": \"Technology stocks show strong growth. Apple reports record earnings.\",\n  \"options\": { \"wait_for_model\": true }\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -64,
        -320
      ],
      "id": "2194a57c-9b09-4be3-a9fe-ffaf1360dd01",
      "name": "FinBert"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        352,
        -512
      ],
      "id": "e493061e-f7ac-42e0-84a9-a8a82d842686",
      "name": "Merge"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# Mode: Run Once for All Items\nimport statistics\nfrom datetime import datetime\n\nincoming = _input.all()  # n8n Python: get all upstream items\n\ndef maybe_unwrap(d):\n    \"\"\"If payload is wrapped like {'json': {...}}, unwrap once.\"\"\"\n    try:\n        # 'in' works on JsProxy; avoid isinstance()\n        if \"json\" in d:\n            j = d[\"json\"]\n            # only unwrap if it's a mapping/array-like, not a scalar\n            try:\n                _ = j.keys()  # mapping-like?\n                return j\n            except Exception:\n                try:\n                    _ = len(j)  # list-like?\n                    return j\n                except Exception:\n                    return d\n        return d\n    except Exception:\n        return d\n\ndef is_market(d):\n    try:\n        return \"Time Series (Daily)\" in d\n    except Exception:\n        return False\n\ndef is_industrial(d):\n    try:\n        return \"current_metrics\" in d\n    except Exception:\n        return False\n\ndef is_sentiment(d):\n    # list-like with first element having \"label\"\n    try:\n        if len(d) > 0:\n            first = d[0]\n            try:\n                return \"label\" in first\n            except Exception:\n                return False\n        return False\n    except Exception:\n        return False\n\nmarket_raw = None\nindustrial_raw = None\nsentiment_raw = None\n\nfingerprints = []\nfor item in incoming:\n    d = maybe_unwrap(item.json)\n\n    # tiny fingerprint to help debugging\n    try:\n        keys = list(d.keys())[:6]\n        fingerprints.append({\"type\": str(type(d)), \"keys\": keys})\n    except Exception:\n        try:\n            L = len(d)\n            first_keys = []\n            if L > 0:\n                try:\n                    first_keys = list(d[0].keys())[:6]\n                except Exception:\n                    first_keys = []\n            fingerprints.append({\"type\": str(type(d)), \"len\": L, \"first_keys\": first_keys})\n        except Exception:\n            fingerprints.append({\"type\": str(type(d))})\n\n    if market_raw is None and is_market(d):\n        market_raw = d\n        continue\n    if industrial_raw is None and is_industrial(d):\n        industrial_raw = d\n        continue\n    if sentiment_raw is None and is_sentiment(d):\n        sentiment_raw = d\n        continue\n\nprocessed = {\n    \"timestamp\": datetime.now().isoformat(),\n    \"debug\": {\n        \"received_items\": len(incoming),\n        \"fingerprints\": fingerprints,\n        \"has_market\": market_raw is not None,\n        \"has_industrial\": industrial_raw is not None,\n        \"has_sentiment\": sentiment_raw is not None,\n    },\n    \"data_sources\": {},\n    \"quality_metrics\": {},\n    \"features\": {},\n    \"volatility\": {},\n}\n\n# ---- SENTIMENT ----\nif sentiment_raw:\n    try:\n        scores = {}\n        for i in range(len(sentiment_raw)):\n            row = sentiment_raw[i]\n            try:\n                lbl = row[\"label\"]; sc = row[\"score\"]\n                scores[lbl] = sc\n            except Exception:\n                pass\n        if scores:\n            dom = max(scores, key=scores.get)\n            processed[\"data_sources\"][\"sentiment\"] = {\n                \"dominant\": dom,\n                \"confidence\": scores[dom],\n                \"value\": 1 if dom == \"positive\" else (-1 if dom == \"negative\" else 0),\n            }\n            processed[\"quality_metrics\"][\"sentiment_ok\"] = True\n        else:\n            processed[\"quality_metrics\"][\"sentiment_ok\"] = False\n    except Exception:\n        processed[\"quality_metrics\"][\"sentiment_ok\"] = False\nelse:\n    processed[\"quality_metrics\"][\"sentiment_ok\"] = False\n\n# ---- MARKET (Alpha Vantage) ----\nif market_raw and is_market(market_raw):\n    # some keys come with stray spaces — find the exact key by strip()\n    ts_key = None\n    try:\n        for k in market_raw:\n            try:\n                if str(k).strip() == \"Time Series (Daily)\":\n                    ts_key = k\n                    break\n            except Exception:\n                continue\n    except Exception:\n        ts_key = None\n\n    if ts_key:\n        ts = market_raw[ts_key]\n        # collect last ~30 closes\n        dates = []\n        try:\n            for k in ts:\n                dates.append(str(k))\n            dates.sort(reverse=True)\n        except Exception:\n            dates = []\n        dates = dates[:30]\n\n        closes = []\n        for d in dates:\n            try:\n                closes.append(float(ts[d][\"4. close\"]))\n            except Exception:\n                pass\n\n        if len(closes) > 1:\n            rets = []\n            for i in range(len(closes) - 1):\n                try:\n                    rets.append((closes[i] - closes[i+1]) / closes[i+1])\n                except Exception:\n                    pass\n            vol = statistics.stdev(rets) if len(rets) > 1 else 0.0\n            change = (closes[0] - closes[-1]) / closes[-1] if closes[-1] != 0 else 0.0\n            trend = \"up\" if change > 0.02 else (\"down\" if change < -0.02 else \"flat\")\n\n            processed[\"data_sources\"][\"market\"] = {\n                \"latest_price\": closes[0],\n                \"price_change_pct\": round(change * 100, 2),\n                \"trend\": trend,\n            }\n            processed[\"volatility\"] = {\n                \"value\": round(vol, 4),\n                \"level\": \"high\" if vol > 0.03 else (\"medium\" if vol > 0.015 else \"low\"),\n                \"risk_score\": round(vol * 100, 2),\n            }\n            processed[\"quality_metrics\"][\"market_ok\"] = True\n        else:\n            processed[\"quality_metrics\"][\"market_ok\"] = False\n    else:\n        processed[\"quality_metrics\"][\"market_ok\"] = False\nelse:\n    processed[\"quality_metrics\"][\"market_ok\"] = False\n\n# ---- INDUSTRIAL ----\nif industrial_raw and is_industrial(industrial_raw):\n    try:\n        m = industrial_raw[\"current_metrics\"]\n        processed[\"data_sources\"][\"industrial\"] = {\n            \"production\": m[\"avg_production_7d\"],\n            \"quality\": m[\"avg_quality_7d\"],\n            \"efficiency\": m[\"avg_efficiency_7d\"],\n            \"downtime\": m[\"total_downtime_7d\"],\n        }\n        processed[\"quality_metrics\"][\"industrial_ok\"] = True\n    except Exception:\n        processed[\"quality_metrics\"][\"industrial_ok\"] = False\nelse:\n    processed[\"quality_metrics\"][\"industrial_ok\"] = False\n\n# ---- OVERALL + FEATURES ----\nok = sum(1 for k in (\"sentiment_ok\",\"market_ok\",\"industrial_ok\") if processed[\"quality_metrics\"].get(k))\nprocessed[\"quality_metrics\"][\"overall_pct\"] = (ok / 3) * 100\nprocessed[\"quality_metrics\"][\"ready\"] = ok >= 2\n\nfeatures = {}\nif processed[\"quality_metrics\"].get(\"sentiment_ok\"):\n    s = processed[\"data_sources\"][\"sentiment\"]\n    features[\"sentiment\"] = s[\"value\"]\n    features[\"sentiment_conf\"] = s[\"confidence\"]\nif processed[\"quality_metrics\"].get(\"market_ok\"):\n    mkt = processed[\"data_sources\"][\"market\"]\n    features[\"price_momentum\"] = mkt[\"price_change_pct\"] / 100.0\n    features[\"market_trend\"] = 1 if mkt[\"trend\"] == \"up\" else (-1 if mkt[\"trend\"] == \"down\" else 0)\nif processed.get(\"volatility\"):\n    features[\"volatility\"] = processed[\"volatility\"][\"value\"]\n    features[\"risk\"] = processed[\"volatility\"][\"risk_score\"] / 100.0\nif processed[\"quality_metrics\"].get(\"industrial_ok\"):\n    ind = processed[\"data_sources\"][\"industrial\"]\n    features[\"production\"] = ind[\"production\"] / 1000.0\n    features[\"quality\"] = ind[\"quality\"]\n    features[\"efficiency\"] = ind[\"efficiency\"]\n\nprocessed[\"features\"] = features\n\nreturn processed\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        592,
        -496
      ],
      "id": "a1c80a47-63ba-45f0-8ab0-6cde1c7c9045",
      "name": "Code1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f76d2719-a1d4-448f-b5ce-b36e9fa0a1b7",
              "leftValue": "={{$json[\"quality_metrics\"][\"overall_pct\"]}}",
              "rightValue": 60,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        880,
        -496
      ],
      "id": "fef40ca5-80ca-4f52-9544-05b12cfcc215",
      "name": "If"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from datetime import datetime\n\n# Read the single item that arrived from the IF True branch\ndata = _input.first().json\n\nfeatures = (data.get(\"features\") or {})\nvolatility = (data.get(\"volatility\") or {})\nsources = (data.get(\"data_sources\") or {})\n\n# Safe reads with defaults\ndef _f(x, dv): \n    try: \n        return float(x) \n    except Exception: \n        return dv\n\nsentiment      = _f(features.get(\"sentiment\", 0), 0.0)\nsentiment_conf = _f(features.get(\"sentiment_conf\", 0.5), 0.5)\nprice_momentum = _f(features.get(\"price_momentum\", 0), 0.0)\nmarket_trend   = _f(features.get(\"market_trend\", 0), 0.0)\nvol            = _f(features.get(\"volatility\", 0.02), 0.02)\nrisk           = _f(features.get(\"risk\", 0.5), 0.5)\nproduction     = _f(features.get(\"production\", 1.0), 1.0)\nquality        = _f(features.get(\"quality\", 0.9), 0.9)\nefficiency     = _f(features.get(\"efficiency\", 0.85), 0.85)\nvol_level      = str(volatility.get(\"level\", \"medium\") or \"medium\")\n\n# Volatility-aware weights\nif vol_level == \"high\":\n    w_production, w_sentiment, w_market, w_quality, w_efficiency = 0.50, 0.10, 0.10, 0.20, 0.10\nelif vol_level == \"low\":\n    w_production, w_sentiment, w_market, w_quality, w_efficiency = 0.35, 0.20, 0.25, 0.10, 0.10\nelse:\n    w_production, w_sentiment, w_market, w_quality, w_efficiency = 0.40, 0.15, 0.20, 0.15, 0.10\n\n# Base and scaling\nbase = (\n    production * w_production +\n    sentiment * w_sentiment * sentiment_conf +\n    (price_momentum + market_trend) * w_market +\n    quality * w_quality +\n    efficiency * w_efficiency\n)\nbase_adjusted = base * (1 - risk * 0.1)\nbase_value = base_adjusted * 1000.0\n\n# Scenario multipliers\nif vol_level == \"high\":\n    opt_mult, pes_mult = 1.25, 0.75\nelif vol_level == \"low\":\n    opt_mult, pes_mult = 1.10, 0.90\nelse:\n    opt_mult, pes_mult = 1.17, 0.83\n\n# Scenarios\nscenarios = {}\n\nscenarios[\"optimistic\"] = {\n    \"value\": round(base_value * opt_mult, 2),\n    \"change_pct\": round((opt_mult - 1.0) * 100.0, 2),\n    \"probability\": 0.25,\n    \"confidence\": round(0.72 * (1.0 - vol), 2),\n    \"assumptions\": [\n        \"Volatility stays \" + vol_level,\n        \"Strong demand continues\",\n        \"Efficiency improvements realized\",\n        \"Market trend: \" + str((sources.get(\"market\") or {}).get(\"trend\", \"stable\")),\n    ],\n    \"risk_level\": \"low\"\n}\n\nscenarios[\"realistic\"] = {\n    \"value\": round(base_value, 2),\n    \"change_pct\": 0,\n    \"probability\": 0.50,\n    \"confidence\": round(0.85 * (1.0 - vol * 0.5), 2),\n    \"assumptions\": [\n        \"Current trends continue\",\n        \"Volatility \" + vol_level,\n        \"Normal operations\",\n        \"No major disruptions\"\n    ],\n    \"risk_level\": \"medium\"\n}\n\nscenarios[\"pessimistic\"] = {\n    \"value\": round(base_value * pes_mult, 2),\n    \"change_pct\": round((pes_mult - 1.0) * 100.0, 2),\n    \"probability\": 0.25,\n    \"confidence\": round(0.75 * (1.0 - vol * 0.3), 2),\n    \"assumptions\": [\n        \"Volatility increases from \" + vol_level,\n        \"Demand weakens\",\n        \"Operational challenges\",\n        \"Supply chain issues\"\n    ],\n    \"risk_level\": \"high\"\n}\n\n# Confidence summary\nvals = [scenarios[\"optimistic\"][\"value\"], scenarios[\"realistic\"][\"value\"], scenarios[\"pessimistic\"][\"value\"]]\nprobs = [0.25, 0.50, 0.25]\nconfs = [scenarios[\"optimistic\"][\"confidence\"], scenarios[\"realistic\"][\"confidence\"], scenarios[\"pessimistic\"][\"confidence\"]]\nweighted_conf = confs[0]*probs[0] + confs[1]*probs[1] + confs[2]*probs[2]\n\nconfidence = {\n    \"overall\": round(weighted_conf, 3),\n    \"range_min\": round(min(vals), 2),\n    \"range_max\": round(max(vals), 2),\n    \"spread\": round(max(vals) - min(vals), 2),\n    \"spread_pct\": round((max(vals) - min(vals)) / (base_value if base_value != 0 else 1.0) * 100.0, 2),\n    \"accuracy_30d\": round(92.5 - vol * 100.0, 2)\n}\n\n# Backtesting (simulated)\nbacktesting = {\n    \"mape\": round(5.2 + vol * 50.0, 2),\n    \"rmse\": round(45.3 + vol * 200.0, 2),\n    \"mae\": round(38.1 + vol * 150.0, 2),\n    \"r2_score\": round(0.87 - vol * 2.0, 3),\n    \"last_updated\": datetime.now().isoformat()\n}\n\n# Final result\nresult = {\n    \"timestamp\": datetime.now().isoformat(),\n    \"scenarios\": scenarios,\n    \"confidence\": confidence,\n    \"backtesting\": backtesting,\n    \"volatility\": volatility\n}\n\nreturn result\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1280,
        -512
      ],
      "id": "a37e4a79-9ceb-4b84-aa28-0f60789772ed",
      "name": "Code2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE IF NOT EXISTS public.forecasting_results (\n    id SERIAL PRIMARY KEY,\n    timestamp TIMESTAMP NOT NULL,\n    symbol TEXT NOT NULL,\n    optimistic_value DECIMAL(10,2),\n    realistic_value DECIMAL(10,2),\n    pessimistic_value DECIMAL(10,2),\n    overall_confidence DECIMAL(6,3),\n    volatility_level VARCHAR(20),\n    mape DECIMAL(6,2),\n    rmse DECIMAL(6,2),\n    created_at TIMESTAMP DEFAULT NOW()\n);\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1472,
        -848
      ],
      "id": "c527d81c-adc1-4aa1-bc0c-39fc7e800e79",
      "name": "Execute a SQL query",
      "credentials": {
        "postgres": {
          "id": "ydA5H01dOa6VvZyg",
          "name": "Postgres account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "54c59880-6747-4f1d-b8cf-ccf4146cf259",
              "name": "status",
              "value": "low_quality",
              "type": "string"
            },
            {
              "id": "dc31cfe2-4d8f-4444-8e37-6af557cf2f46",
              "name": "overall_pct",
              "value": "={{$json[\"quality_metrics\"][\"overall_pct\"]}}",
              "type": "number"
            },
            {
              "id": "6f5158bc-a77b-49d2-96b0-b554d0b7ca2f",
              "name": "sentiment_ok",
              "value": "={{$json[\"quality_metrics\"][\"sentiment_ok\"]}}",
              "type": "boolean"
            },
            {
              "id": "052785fd-e199-4a34-9293-c6080f109971",
              "name": "market_ok",
              "value": "={{$json[\"quality_metrics\"][\"market_ok\"]}}",
              "type": "boolean"
            },
            {
              "id": "ff1ae70f-decf-46e0-bfce-9c6b4c0c2c6d",
              "name": "industrial_ok",
              "value": "={{ false }}",
              "type": "boolean"
            },
            {
              "id": "8b2822d7-54f5-4737-90b8-8a2b66e1fe46",
              "name": "when",
              "value": "={{$now}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1152,
        -320
      ],
      "id": "537f8aa4-00d5-454f-b1cb-2b117af581ab",
      "name": "Edit Fields"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -896,
        -496
      ],
      "id": "739313b3-5451-4dae-926d-8a004698c67e",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "forecasting_results",
          "mode": "list",
          "cachedResultName": "forecasting_results"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "timestamp": "={{ $json.timestamp }}",
            "symbol": "={{$node[\"Configuration\"].json.company_symbol || \"AAPL\"}}",
            "optimistic_value": "={{$json.scenarios.optimistic.value}}",
            "realistic_value": "={{$json.scenarios.realistic.value}}",
            "overall_confidence": "={{$json.confidence.overall}}",
            "volatility_level": "={{$json.volatility.level}}",
            "mape": "={{$json.backtesting.mape}}",
            "rmse": "={{$json.backtesting.rmse}}",
            "created_at": "={{$json.timestamp}}\n",
            "pessimistic_value": "={{$json.scenarios.pessimistic.value}}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "timestamp",
              "displayName": "timestamp",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "symbol",
              "displayName": "symbol",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "optimistic_value",
              "displayName": "optimistic_value",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "realistic_value",
              "displayName": "realistic_value",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "pessimistic_value",
              "displayName": "pessimistic_value",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "overall_confidence",
              "displayName": "overall_confidence",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "volatility_level",
              "displayName": "volatility_level",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "mape",
              "displayName": "mape",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "rmse",
              "displayName": "rmse",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1488,
        -512
      ],
      "id": "4776307a-405b-43f2-83a2-06e3e1411ed4",
      "name": "Insert rows in a table",
      "credentials": {
        "postgres": {
          "id": "ydA5H01dOa6VvZyg",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "fromEmail": "your_email",
        "toEmail": "your_email",
        "html": "=⚠️ Forecast skipped: data quality below threshold\noverall_pct: {{$json.overall_pct}}\nsentiment_ok: {{$json.sentiment_ok}}, market_ok: {{$json.market_ok}}, industrial_ok: {{$json.industrial_ok}}\nwhen: {{$json.when}}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        1392,
        -320
      ],
      "id": "497a1f61-2a33-4595-94a6-db21766dcc91",
      "name": "Send email",
      "webhookId": "bc72edaf-2cd7-43dc-8187-2878e77892da",
      "credentials": {
        "smtp": {
          "id": "6GHmSHwzqKD1HSrk",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import random\nfrom datetime import datetime, timedelta\n\nrandom.seed(42)\nhistorical_data = []\nbase_production = 1000\n\nfor i in range(30, 0, -1):\n    date = datetime.now() - timedelta(days=i)\n    production = base_production + random.uniform(-100, 150)\n    quality = random.uniform(0.85, 0.98)\n    efficiency = random.uniform(0.75, 0.95)\n    downtime = random.uniform(0, 4)\n\n    historical_data.append({\n        \"date\": date.strftime(\"%Y-%m-%d\"),\n        \"production_volume\": round(production, 2),\n        \"quality_score\": round(quality, 3),\n        \"efficiency_rate\": round(efficiency, 3),\n        \"downtime_hours\": round(downtime, 2),\n    })\n\nrecent_7days = historical_data[-7:]\navg_production = sum(d[\"production_volume\"] for d in recent_7days) / 7\navg_quality = sum(d[\"quality_score\"] for d in recent_7days) / 7\navg_efficiency = sum(d[\"efficiency_rate\"] for d in recent_7days) / 7\n\nreturn {\n    \"historical_data\": historical_data,\n    \"current_metrics\": {\n        \"avg_production_7d\": round(avg_production, 2),\n        \"avg_quality_7d\": round(avg_quality, 3),\n        \"avg_efficiency_7d\": round(avg_efficiency, 3),\n        \"total_downtime_7d\": sum(d[\"downtime_hours\"] for d in recent_7days),\n    },\n    \"timestamp\": datetime.now().isoformat(),\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -64,
        -496
      ],
      "id": "d9cb5b1b-e095-48f5-9586-5d7d42892e29",
      "name": "Historical data"
    }
  ],
  "pinData": {},
  "connections": {
    "Alpha Vantage Market Data": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configuration": {
      "main": [
        [
          {
            "node": "FinBert",
            "type": "main",
            "index": 0
          },
          {
            "node": "Historical data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Alpha Vantage Market Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FinBert": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Insert rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query": {
      "main": [
        []
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Send email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Configuration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert rows in a table": {
      "main": [
        []
      ]
    },
    "Send email": {
      "main": [
        []
      ]
    },
    "Historical data": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "352bf7d1-9c74-4bb7-908a-366f0fb082fc",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "c5605aae802302d14cf85834357505b8eaf4143631bcf5d9ab9240de503b0d2d"
  },
  "id": "fq0GKpS1s2lg90YA",
  "tags": []
}